#include <stdio.h>
#include <string.h>
#include <oraca.h>
#include <sqlca.h>
#include <sqlcpr.h>

/* Variables-hotes */

EXEC SQL BEGIN DECLARE SECTION;
  char    *userid = "FCH/FCH";             /* variable de connection */
  int     id;
  VARCHAR id_VARCHAR[16]; 
EXEC SQL END DECLARE SECTION;

EXEC SQL DECLARE authors  TABLE           /* ...a cause du PL/SQL   */
   (AU_ID     NUMBER(16,0)  NOT NULL ,    /* si l'option USERID= de */
    AU_FNAME  VARCHAR2(20)  NOT NULL ,    /* pre-comp est omise     */
    AU_LNAME  VARCHAR2(20)  NOT NULL ,
    ADRESS    VARCHAR2(40)           ,
    CITY      VARCHAR2(20)           ,
    STATE        CHAR(2)             ,
    COUNTRY   VARCHAR2(12)           ,   
    POSTALCODE CHAR(10)              ,
    );

/* Variables diverses      */
	char    *chaine;
	int     i;       
/* Prototype des fonctions */

void sqlglm(char         *message_buffer,
            unsigned int *buffer_size,
            unsigned int *message_length);
void sql_error();

/* ------------------------------------------------------------------*/
/* Appel d'une procedure stockée PL/SQL                              */
/* ------------------------------------------------------------------*/
void main()
{     
	EXEC SQL WHENEVER SQLERROR DO sql_error();
      EXEC SQL CONNECT :userid; 

/* ------------------------------------------------------------------*/
/* Appel de la procédure qui prend un INTEGER en entrée              */
/* ------------------------------------------------------------------*/
	id = 10;

	EXEC SQL CALL salepkg.insert_sales_proc (:id,15,20);

	EXEC SQL COMMIT;

	printf("INT id= %d \n",id);
/* -----------------------------------------------------------------------*/
/* Appel de la fonction  qui prend un VARCHAR en entrée - retourne un int */
/* -----------------------------------------------------------------------*/
	chaine = "100";
	id_VARCHAR.len = 3;
   
	for (i=0;i<id_VARCHAR.len;i++)
		id_VARCHAR.arr[i] = *(chaine + i);
      
	EXEC SQL CALL defectspkg.ctrl_defect (:id_VARCHAR) INTO :id;

	EXEC SQL COMMIT RELEASE;
      
    printf("VARCHAR id= %.*s \n",id_VARCHAR.len,id_VARCHAR.arr);
}

/* --------------------------------------------------------------------- */
/* Appel de la fonction Oracle qui retourne le message d'erreur integral */
/* --------------------------------------------------------------------- */
void sql_error()
{
	char         msg_buf[200];
	unsigned int msg_buf_len,msg_actual_len;

	msg_buf_len = sizeof (msg_buf);

	sqlglm(msg_buf,&msg_buf_len,&msg_actual_len);                
	
	printf("sqlcode = %d \n",sqlca.sqlcode);
	printf("%.*s \n",msg_buf_len,msg_buf);

	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK RELEASE;

} 