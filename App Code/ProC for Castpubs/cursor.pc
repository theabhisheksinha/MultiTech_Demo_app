#include <stdio.h>
#include <string.h>
#include <oraca.h>
#include <sqlca.h>
#include <sqlcpr.h>

/* Variables-hotes */

EXEC SQL BEGIN DECLARE SECTION;
  char *userid = "FCH/FCH";                  /* variable de connection */  
                                             /* variables hôtes ...    */                   
  int     id;                                /* id                     */
  VARCHAR fname[20];                         /* fname                  */
  VARCHAR lname[20];                         /* lname                  */ 
  VARCHAR adress[40];                        /* adress                 */
  int     codpost;                           /* codpost                */             
  VARCHAR ville[20];                         /* ville                  */
  
  short   ind_adress;                        /* indicatrice NULL       */  
  
EXEC SQL END DECLARE SECTION;

/* Prototype des fonctions */

void sqlglm(char         *message_buffer,
            unsigned int *buffer_size,
            unsigned int *message_length);
void sql_error();

/* ------------------------------------------------------------------*/
/* Construction d'une requete dynamique avec nombre de colonnes fixe */
/* ------------------------------------------------------------------*/
void main()
{

	EXEC SQL WHENEVER SQLERROR DO sql_error();
      EXEC SQL CONNECT :userid;
	 
	codpost = 91;
	printf("authors\n");
	EXEC SQL DECLARE my_cursor CURSOR FOR 
		SELECT au_id,au_fname,au_lname,NVL(address,'X'),postalcode,city
		  FROM authors
	     WHERE postalcode = :codpost;

	codpost = 75000;

	EXEC SQL OPEN my_cursor;

	EXEC SQL FETCH my_cursor INTO :id,:fname,:lname,:adress,:codpost,:ville;
	while(sqlca.sqlcode == 0 || sqlca.sqlcode != 1403)
	{
		printf("id = %d \n" 
			   "fname = %.*s \n lname = %.*s \n"
		       "adress = %.*s \n codpost = %d \n" 
			   "ville = %.*s \n",
		        id,fname.len,fname.arr,lname.len,lname.arr,
				adress.len,adress.arr,codpost,ville.len,ville.arr);
		EXEC SQL FETCH my_cursor INTO :id,:fname,:lname,:adress,:codpost,:ville;

	}

	EXEC SQL CLOSE my_cursor;
	EXEC SQL COMMIT RELEASE;
}

/* --------------------------------------------------------------------- */
/* Appel de la fonction Oracle qui retourne le message d'erreur integral */
/* --------------------------------------------------------------------- */
void sql_error()
{
	char         msg_buf[200];
	unsigned int msg_buf_len,msg_actual_len;

	msg_buf_len = sizeof (msg_buf);

	sqlglm(msg_buf,&msg_buf_len,&msg_actual_len);                
	
	printf("sqlcode = %d \n",sqlca.sqlcode);
	printf("%.*s \n",msg_buf_len,msg_buf);

	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL CLOSE my_cursor;
	EXEC SQL ROLLBACK RELEASE;

}